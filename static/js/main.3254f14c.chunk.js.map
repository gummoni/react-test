{"version":3,"sources":["logo.svg","useInterval.tsx","Header.tsx","Main.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Header","useState","count","setCount","setDelay","className","src","logo","alt","href","target","rel","Button","variant","onClick","anime","document","getElementById","style","animationDuration","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,qMCiB5BC,MAfR,SAAqBC,EAAeC,GACzC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAEJI,qBAAU,WACR,GAAIH,GAAS,EAAG,CACd,IAAIK,EAAKC,aAAY,WAAQL,EAAcG,YAAaJ,GACxD,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,KC+CSQ,MAxDf,WAAmB,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEUF,mBAAS,IAFnB,mBAETT,EAFS,KAEFY,EAFE,KAQhB,OAJAd,GAAY,WACVa,EAASD,EAAQ,KAChBV,GAGD,4BAAQa,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOX,GAAG,aACnD,mCACO,6CADP,wBAGA,uBACEQ,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEHT,GAEH,kBAACU,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPV,GAAU,GACV,IAAMW,EAAQC,SAASC,eAAe,YAClC,OAASF,IAAOA,EAAMG,MAAMC,kBAAoB,QALxD,QAUA,kBAACP,EAAA,EAAD,CACEC,QAAQ,SACRC,QAAS,WACPV,EAAS,GACT,IAAMW,EAAQC,SAASC,eAAe,YAClC,OAASF,IAAOA,EAAMG,MAAMC,kBAAoB,QALxD,QAUA,kBAACP,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACPV,EAAS,KACT,IAAMW,EAAQC,SAASC,eAAe,YAClC,OAASF,IAAOA,EAAMG,MAAMC,kBAAoB,SALxD,SCtCSC,MAPf,WACE,OACE,gCCKWC,MAPf,WACE,OACE,kCCaWC,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDiIpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3254f14c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback: any, delay: number) {\r\n  const savedCallback = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    if (delay >= 0) {\r\n      let id = setInterval(() => { savedCallback.current() }, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","import React, { useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport useInterval from \"./useInterval\";\r\n\r\nfunction Header() {\r\n  const [count, setCount] = useState(0);\r\n  const [delay, setDelay] = useState(10);\r\n\r\n  useInterval(() => {\r\n    setCount(count + 1);\r\n  }, delay);\r\n\r\n  return (\r\n    <header className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" id=\"App-logo\" />\r\n      <p>\r\n        Edit <code>src/App.tsx</code> and save to reload.\r\n      </p>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        {count}\r\n      </a>\r\n      <Button\r\n        variant=\"secondary\"\r\n        onClick={() => {\r\n          setDelay(-1);\r\n          const anime = document.getElementById(\"App-logo\");\r\n          if (null !== anime) anime.style.animationDuration = \"0s\";\r\n        }}\r\n      >\r\n        stop\r\n      </Button>\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={() => {\r\n          setDelay(0);\r\n          const anime = document.getElementById(\"App-logo\");\r\n          if (null !== anime) anime.style.animationDuration = \"1s\";\r\n        }}\r\n      >\r\n        high\r\n      </Button>\r\n      <Button\r\n        variant=\"success\"\r\n        onClick={() => {\r\n          setDelay(100);\r\n          const anime = document.getElementById(\"App-logo\");\r\n          if (null !== anime) anime.style.animationDuration = \"20s\";\r\n        }}\r\n      >\r\n        low\r\n      </Button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Main() {\r\n  return (\r\n    <main>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Main />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}